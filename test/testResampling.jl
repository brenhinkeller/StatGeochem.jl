## --- Resampling.jl

    index = Array{Int64}(undef,1000)
    resampled = Array{Int64}(undef,1000)
    @test bsr!(resampled,index,1:10,0,0.5) |> unique ⊆ 1:10
    @test bsr!(resampled,index,1:10,0,fill(0.5,1000)) |> unique ⊆ 1:10
    @test bsr!(resampled,index,1:10,fill(0,10),0.5) |> unique ⊆ 1:10
    @test bsr!(resampled,index,1:10,fill(0,10),fill(0.5,1000)) |> unique ⊆ 1:10

    index = Array{Int64}(undef,1000)
    resampled = Array{Int64}(undef,1000,10)
    data = repeat(1:10,1,10)
    @test vec(bsr!(resampled,index,data,zeros(10),0.5)) |> unique ⊆ 1:10
    @test vec(bsr!(resampled,index,data,zeros(10),fill(0.5,10))) |> unique ⊆ 1:10

    resampled = Array{Float64}(undef,1000)
    # Gaussian
    bsr!(resampled, index, ones(10), 0.5, 0.5)
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(resampled, index, ones(10), 0.5, fill(0.5,1000))
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(resampled, index, ones(10), fill(0.5,10), 0.5)
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(resampled, index, ones(10), fill(0.5,10), fill(0.5,1000))
    @test isapprox(mean(resampled), 1, atol=0.3)
    # Other distributions
    bsr!(uniform, resampled, index, ones(10), 0.5, 0.5)
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(triangular, resampled, index, ones(10), 0.5, fill(0.5,1000))
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(triangular, resampled, index, ones(10), fill(0.5,10), 0.5)
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(uniform, resampled, index, ones(10), fill(0.5,10), fill(0.5,1000))
    @test isapprox(mean(resampled), 1, atol=0.3)

    @test bsresample(1:10,fill(0.5,10),1000,0.5)::Array{Float64} |> length == 1000
    @test bsresample(1:10,fill(0.5,10),1000,fill(0.5,10))::Array{Float64} |> length == 1000

    d = Dict{String,Vector{Float64}}()
    d["x"] = 1:10;  d["y"] = 2:2:20
    d["x_sigma"] = d["y_sigma"] = fill(0.5,10)
    dbs = bsresample(d, 1000, ["x","y"], 0.5)
    @test isapprox(mean(dbs["x"]), 5.5, atol=0.5)
    @test isapprox(std(dbs["x"]), 3.03, atol=0.5)
    @test isapprox(mean(dbs["y"]), 11, atol=1)
    @test isapprox(std(dbs["y"]), 6.06, atol=1)

    dt = TupleDataset(d)
    @test isa(dt, NamedTuple)
    dbs = bsresample(dt, 1000, (:x, :y), 0.5)
    @test isapprox(mean(dbs[:x]), 5.5, atol=0.5)
    @test isapprox(std(dbs[:x]), 3.03, atol=0.5)
    @test isapprox(mean(dbs[:y]), 11, atol=1)
    @test isapprox(std(dbs[:y]), 6.06, atol=1)

    @test bincounts(1:100, 0.0:10:100.0) == (5:10:95, fill(10,10))
    @test bincounts(1:100, 0, 100, 10) == (5:10:95, fill(10,10))
    c,N = bincounts(1:100, 0, 100, 10; relbinwidth=3)
    @test c == 5:10:95
    @test N == [20, 30, 30, 30, 30, 30, 30, 30, 30, 20]

    @test binmeans(1:100, 1:100, 0.0:10:100.0) == (5:10:95, 5.5:10:95.5, fill(0.9574271077563381,10))
    @test binmeans(1:100, 1:100, 0, 100, 10) == (5:10:95, 5.5:10:95.5, fill(0.9574271077563381,10))
    c,m,e = binmeans(1:100, 1:100, 0, 100, 10; relbinwidth=3)
    @test c == 5:10:95
    @test m == [10.5, 15.5, 25.5, 35.5, 45.5, 55.5, 65.5, 75.5, 85.5, 90.5]
    @test e ≈ [1.3228756555322954, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.3228756555322954]
    @test binmeans(1:100, 1:100, 0, 100, 10, ones(100)) == (5:10:95, 5.5:10:95.5, fill(0.9574271077563381,10))
    c,m,e = binmeans(1:100, 1:100, 0, 100, 10, ones(100); relbinwidth=3)
    @test c == 5:10:95
    @test m == [10.5, 15.5, 25.5, 35.5, 45.5, 55.5, 65.5, 75.5, 85.5, 90.5]
    @test e ≈ [1.3228756555322954, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.3228756555322954]

    @test binmedians(1:100,1:100,0.0:10:100.0) == (5:10:95, 5.5:10:95.5, fill(1.1720982147414096,10))
    @test binmedians(1:100,1:100,0,100,10) == (5:10:95, 5.5:10:95.5, fill(1.1720982147414096,10))
    c,m,e = binmedians(1:100, 1:100, 0, 100, 10; relbinwidth=3)
    @test c == 5:10:95
    @test m == [10.5, 15.5, 25.5, 35.5, 45.5, 55.5, 65.5, 75.5, 85.5, 90.5]
    @test e ≈ [1.6575971917205938, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 1.6575971917205938]

    @test randsample(1:10., 1000, rand(1000))::Array{Float64} |> length == 1000
    @test randsample(1:10, 1000)::Array{Int64} |> length == 1000
    @test unique(randsample(1:10, 1000)) ⊆ 1:10

    dr = randsample(d, 1000, ["x","y"], 0.5)
    @test isapprox(mean(dr["x"]), 5.5, atol=0.5)
    @test isapprox(std(dr["x"]), 3.03, atol=0.5)
    @test unique(dr["x"]) ⊆ 1:10
    @test isapprox(mean(dr["y"]), 11, atol=1)
    @test isapprox(std(dr["y"]), 6.06, atol=1)
    @test unique(dr["y"]) ⊆ 2:2:20

## --- Invweight

    @test invweight(0:10,0:10,0:10) ≈ [13.092772378121769, 13.759663290331229, 14.079390874013654, 14.244556812410089, 14.327747696132253, 14.354508911206949, 14.331218676773712, 14.251150311763046, 14.088257739618454, 13.76917452212827, 13.101581593462868]
    @test invweight_location(0:10,0:10) ≈ [2.3478642777118957, 2.950680392065609, 3.2200556525889006, 3.348975353894235, 3.4103053158720016, 3.4297605864726126, 3.413776296513463, 3.3555688532471923, 3.2289225181937002, 2.9601916238626513, 2.3566734930529947]
    @test invweight_age(0:10) ≈ [10.744908100409873, 10.808982898265619, 10.859335221424754, 10.895581458515855, 10.91744238026025, 10.924748324734335, 10.91744238026025, 10.895581458515855, 10.859335221424754, 10.808982898265619, 10.744908100409873]
    @test invweight(3:7, 3:7, 3:7, spatialscale=1:3, agescale=20:10:40) ≈ [6.455459194232295 6.4954174826726305 6.50970747669241; 7.221911822727031 7.261870111167367 7.276160105187145; 7.829876642142075 7.86983493058241 7.8841249246021885;;; 6.795239175454396 6.815587062014095 6.822796065519029; 7.814257428828995 7.8346053153886945 7.841814318893627; 8.464965591963413 8.485313478523112 8.492522482028043;;; 6.866607765314396 6.880327963335503 6.88516052627444; 7.9787064574491104 7.992426655470217 7.9972592184091535; 8.67354089449909 8.687261092520199 8.692093655459136;;; 6.796516961665698 6.816864848225396 6.82407385173033; 7.81538067459392 7.835728561153617 7.84293756465855; 8.46552963870305 8.485877525262747 8.49308652876768;;; 6.456852342594404 6.496810631034739 6.511100625054519; 7.223828686779423 7.263786975219759 7.278076969239537; 7.831650416268091 7.871608704708425 7.885898698728204]

    # Test NaN-ful cases
    lat, lon, age = [0:10..., NaN], [0:10..., NaN], [0:10..., NaN]
    @test invweight(lat, lon, age) ≈ [13.092772378121769, 13.759663290331229, 14.079390874013654, 14.244556812410089, 14.327747696132253, 14.354508911206949, 14.331218676773712, 14.251150311763046, 14.088257739618454, 13.76917452212827, 13.101581593462868, Inf]
    @test invweight_location(lat, lon) ≈ [2.3478642777118957, 2.950680392065609, 3.2200556525889006, 3.348975353894235, 3.4103053158720016, 3.4297605864726126, 3.413776296513463, 3.3555688532471923, 3.2289225181937002, 2.9601916238626513, 2.3566734930529947, Inf]
    @test invweight_age(age) ≈ [10.744908100409873, 10.808982898265619, 10.859335221424754, 10.895581458515855, 10.91744238026025, 10.924748324734335, 10.91744238026025, 10.895581458515855, 10.859335221424754, 10.808982898265619, 10.744908100409873, Inf]

    @test resamplingprobability(invweight(lat, lon, age)) ≈ [0.17709468716990867, 0.16997032242046156, 0.1667541264064975, 0.16513990970091127, 0.16433863731114293, 0.1640825308282905, 0.16430537469842987, 0.16507611788372856, 0.16666666666666666, 0.16987285789479709, 0.17699668840192856, 0.0]
    @test resamplingprobability(invweight_location(lat, lon)) ≈ [0.2157181923483138, 0.1795609083825818, 0.16704894086177344, 0.1616579035210186, 0.15921356093554181, 0.158453529370978, 0.1590774311384848, 0.16139152082816496, 0.16666666666666666, 0.17908729309480173, 0.21508527491483678, 0.0]
    @test resamplingprobability(invweight_age(age)) ≈ [0.16814313324769609, 0.1673131616109112, 0.16666666666666666, 0.16620436987522427, 0.16592678603901323, 0.16583422381194865, 0.16592678603901323, 0.16620436987522427, 0.16666666666666666, 0.1673131616109112, 0.16814313324769609, 0.0]

## --- bin_bsr

    x = 0:100; y = 0:100
    xmin = 0; xmax = 100; nbins = 5
    step = (xmax-xmin)/nbins
    (c,m,e) = bin_bsr(x, y, xmin, xmax, nbins, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(e, [1.17, 1.21, 1.23, 1.26, 1.28], atol=0.5)

    (c,m,e) = bin_bsr(x, y, xmin:step:xmax, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(e, [1.17, 1.21, 1.23, 1.26, 1.28], atol=0.5)

    # Upper and lower CIs
    (c,m,el,eu) = bin_bsr(nanbinmean!, x, y, xmin, xmax, nbins, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(el, [2.29, 2.38, 2.41, 2.49, 2.51], atol=1.0)
    @test isapprox(eu, [2.3, 2.37, 2.42, 2.51, 2.51], atol=1.0)

    # Upper and lower CIs
    (c,m,el,eu) = bin_bsr(nanbinmean!, x, y, xmin:step:xmax, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(el, [2.29, 2.38, 2.41, 2.49, 2.51], atol=1.0)
    @test isapprox(eu, [2.3, 2.37, 2.42, 2.51, 2.51], atol=1.0)

    # Medians, upper and lower CIs
    (c,m,el,eu) = bin_bsr(nanbinmedian!, x, y, xmin, xmax, nbins, x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.01, 29.91, 49.9, 69.88, 89.79], atol=1)
    @test isapprox(el, [4.01, 3.91, 3.9, 3.88, 3.79], atol=2)
    @test isapprox(eu, [3.99, 4.09, 4.1, 4.12, 4.21], atol=2)

    # with weights
    w = ones(101)
    (c,m,e) = bin_bsr(x, y, xmin, xmax, nbins, w, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(e, [1.17, 1.21, 1.23, 1.26, 1.28], atol=0.5)

    # with 2-D array (matrix) of y data
    y = repeat(0:100, 1, 4)
    y_sigma = ones(101,4)
    (c,m,e) = bin_bsr(x, y, xmin, xmax, nbins, x_sigma=ones(101), y_sigma=y_sigma)
    @test c == 10.0:20.0:90.0
    @test isapprox(m, repeat([10.04, 29.94, 49.94, 69.92, 89.83], 1, 4), atol=0.5)
    @test isapprox(e, repeat([1.17, 1.21, 1.23, 1.26, 1.28], 1, 4), atol=0.5)

    (c,m,el,eu) = bin_bsr(x, y, xmin, xmax, nbins, x_sigma=ones(101), y_sigma=y_sigma, sem=:CI)
    @test c == 10.0:20.0:90.0
    @test isapprox(m, repeat([10.04, 29.94, 49.94, 69.92, 89.83], 1, 4), atol=0.5)
    @test isapprox(el, repeat([2.29, 2.38, 2.41, 2.49, 2.51], 1, 4), atol=1.0)
    @test isapprox(eu, repeat([2.3, 2.37, 2.42, 2.51, 2.51], 1, 4), atol=1.0)

    # with CompositionArray
    μ = NCKFMASHTOtrace{Float64}(60.072025289335684, 1.059083288330563, 15.257593710407056, 7.052027377050142, 4.711705761182858, 6.086117439525022, 3.379148338738595, 2.4581002824407934, 0.14133757130691516, 4.113083109875368, 1255.7967894552323, 76.44193773208823, 4.095536767202141, 491.2973182431708, 703.830659935478, 20.355221327356887, 168.32716381261844, 220.61385267419197, 1121.312653825145, 31.53688232045869, 114.70683919387331, 39.72006274658348, 76.57108037605326, 35.817558608524195, 6.741094058803503, 1.6816817193788747, 6.067011581649038, 0.989297434324421, 5.331765907950092, 2.8741907388622607, 0.4124276887585211, 29.024592618856115, 201.5287565670934, 5.291947925424482, 24.835421909829385, 1.8699354233592267, 18.138514173686172, 21.573443871865116, 10.32928288372375, 4.020174623363817)
    Σ = [104.259 -6.14736 -2.99925 -37.5378 -34.626 -34.6239 3.80177 11.7137 -0.752337 -0.0300938 -5468.5 423.064 7.83923 -1144.36 1168.8 -102.447 -881.691 -1738.82 -4059.97 -185.452 -867.636 82.4917 136.187 26.406 1.40397 -3.57344 1.2174 -0.00153407 4.55616 5.24703 0.794533 34.0624 275.117 12.7115 -5.66861 2.05386 154.642 123.795 54.3853 30.8647; -6.14736 0.899536 0.0120526 2.74753 1.25224 1.96674 -0.0838187 -0.651745 0.0550664 0.0191944 744.163 -27.2453 -0.737126 107.889 -34.7568 6.06261 72.9567 -17.1353 282.939 8.69446 -2.39172 0.0595283 2.95614 5.28949 1.30354 0.642044 1.16552 0.156855 0.808941 0.00155007 -0.012787 2.10071 19.2596 0.121684 6.38617 0.234376 -8.15255 -4.04982 -3.03955 -1.89407; -2.99925 0.0120526 8.56657 -1.74441 -6.11845 1.04469 1.45481 0.0847943 -0.0349616 0.0298593 265.363 -1.60437 -0.0532131 380.791 77.8888 -2.017 -8.8598 -783.006 -117.199 -28.4303 -387.849 1.49597 1.23138 -6.643 -0.781987 0.053527 -0.862209 -0.649348 -0.750509 -0.829846 -0.0757563 -6.82546 14.8067 -0.855958 1.29595 -0.483559 -24.1314 -12.5494 0.475989 -2.49825; -37.5378 2.74753 -1.74441 18.0089 12.5941 12.2049 -1.95882 -5.2722 0.360936 0.0499961 1930.73 -193.619 -5.52592 57.241 -808.102 45.6214 407.524 600.139 1821.36 81.0792 306.821 -42.4976 -71.0086 -12.7187 -0.28228 1.48416 0.581616 0.548474 0.253515 -0.521617 -0.117003 -0.428823 -96.1591 -4.34802 -6.94313 -1.11224 -53.6359 -45.2965 -26.2127 -13.2777; -34.626 1.25224 -6.11845 12.5941 25.2847 11.0775 -3.48091 -5.28502 0.252412 0.133904 726.694 -179.176 -1.97683 -82.3143 -828.691 36.996 267.034 2129.93 1314.34 110.576 1082.95 -58.7137 -105.922 -32.0421 -4.9292 -0.0544992 -4.496 -0.254622 -5.41301 -2.73442 -0.407504 -24.7701 -260.211 -6.78207 -19.2332 -0.803057 -37.7543 -50.6202 -24.3534 -10.3119; -34.6239 1.96674 1.04469 12.2049 11.0775 15.8323 -1.88304 -5.34658 0.244612 0.0800599 1544.76 -187.814 -4.19999 342.33 -686.531 42.0231 346.533 452.169 1185.28 63.3387 169.266 -51.9077 -89.499 -26.1148 -2.964 0.719832 -2.25155 0.0432487 -2.84354 -2.47205 -0.363481 -18.7281 -209.242 -7.21996 -19.0428 -2.16383 -51.32 -36.8568 -25.9613 -11.4755; 3.80177 -0.0838187 1.45481 -1.95882 -3.48091 -1.88304 1.85707 0.37549 -0.0392589 -0.0157019 107.605 10.2852 -0.351434 122.798 69.2356 -7.34303 -48.7831 -307.672 -258.751 -17.0372 -146.62 12.0486 22.5951 6.2727 1.17099 0.177604 0.901709 0.0191987 1.0871 0.372968 0.0755337 4.07205 85.9525 2.15782 18.0136 1.08615 -8.23311 -2.56785 3.69478 -0.581891; 11.7137 -0.651745 0.0847943 -5.2722 -5.28502 -5.34658 0.37549 4.30338 -0.105666 -0.0210577 -9.04844 153.617 5.83376 162.674 762.26 -17.9604 -134.318 -298.694 -518.046 -30.9505 -139.182 50.2203 92.7056 33.6626 4.6261 0.362995 3.15483 0.381395 2.04337 1.18866 0.1635 12.0428 161.715 4.56473 23.563 1.57517 22.9257 17.5925 19.9263 7.54229; -0.752337 0.0550664 -0.0349616 0.360936 0.252412 0.244612 -0.0392589 -0.105666 0.00723392 0.00100203 38.6958 -3.88053 -0.110751 1.14723 -16.1961 0.91435 8.16764 12.0281 36.5038 1.625 6.14935 -0.851743 -1.42316 -0.254911 -0.00565748 0.0297457 0.0116568 0.0109926 0.00508099 -0.0104543 -0.00234499 -0.00859452 -1.92723 -0.0871436 -0.139155 -0.0222915 -1.07498 -0.907838 -0.525357 -0.266114; -0.0300938 0.0191944 0.0298593 0.0499961 0.133904 0.0800599 -0.0157019 -0.0210577 0.00100203 0.0256819 23.736 -0.657415 0.190861 7.01909 0.686421 0.330526 4.48111 10.1466 20.8054 0.61082 5.29865 0.360391 0.657425 0.39617 0.0846198 0.0237424 0.0312216 0.0174646 0.0157598 0.0123762 0.000820948 0.0760552 0.94455 0.0268175 0.214282 0.0189135 0.0886939 -0.50001 0.0371605 0.0635709; -5468.5 744.163 265.363 1930.73 726.694 1544.76 107.605 -9.04844 38.6958 23.736 2.36671e6 -3244.13 -144.122 334333.0 335436.0 1900.43 36631.5 -56031.2 260544.0 2326.28 -19559.4 18095.8 38322.7 19310.2 3651.7 1583.94 2195.64 176.581 937.106 156.523 -7.84925 4330.25 63350.4 1256.71 13369.4 701.847 -12427.3 -5528.78 517.623 2536.04; 423.064 -27.2453 -1.60437 -193.619 -179.176 -187.814 10.2852 153.617 -3.88053 -0.657415 -3244.13 9194.44 528.588 977.764 20940.0 -647.905 -4965.5 -9519.37 -15342.6 -1122.16 -4539.18 1841.29 3281.51 1116.25 184.678 4.91557 138.671 11.9901 86.1496 57.7354 8.52366 565.093 6421.35 181.059 1056.93 81.9987 284.749 52.7466 1042.7 406.721; 7.83923 -0.737126 -0.0532131 -5.52592 -1.97683 -4.19999 -0.351434 5.83376 -0.110751 0.190861 -144.122 528.588 316.597 163.37 881.251 -21.8563 -154.034 170.088 -391.233 -2.81221 64.2443 76.3766 135.598 60.1589 8.65614 0.683822 6.25899 0.177213 2.97253 1.79702 0.242115 11.9051 192.457 6.74848 41.3906 5.89378 3.32822 7.71217 47.1314 31.9789; -1144.36 107.889 380.791 57.241 -82.3143 342.33 122.798 162.674 1.14723 7.01909 334333.0 977.764 163.37 347856.0 286479.0 -793.072 3843.43 -34570.7 3700.0 -1761.36 -15386.2 11726.2 22946.5 9446.82 1121.97 334.785 611.315 12.3354 101.979 -227.948 -30.4766 -1051.09 14839.3 391.072 3544.41 96.4133 -3651.25 -1469.35 1936.79 -198.237; 1168.8 -34.7568 77.8888 -808.102 -828.691 -686.531 69.2356 762.26 -16.1961 0.686421 335436.0 20940.0 881.251 286479.0 2.47931e6 -3260.61 -22946.3 -60373.9 -74522.8 -6187.19 -27992.4 17959.2 35029.2 14137.1 1619.85 383.113 1004.67 35.8523 297.822 -30.2857 -9.30024 847.58 35253.8 953.293 4095.11 184.705 -3008.68 -408.287 3774.85 703.121; -102.447 6.06261 -2.017 45.6214 36.996 42.0231 -7.34303 -17.9604 0.91435 0.330526 1900.43 -647.905 -21.8563 -793.072 -3260.61 237.572 1519.91 1703.31 5289.77 245.732 582.909 -209.056 -379.064 -124.586 -16.4733 1.04446 -6.04454 0.731751 -0.272626 -1.22774 -0.354696 -11.7812 -676.115 -22.8871 -87.4005 -8.75451 -168.207 -107.63 -91.8228 -28.7346; -881.691 72.9567 -8.8598 407.524 267.034 346.533 -48.7831 -134.318 8.16764 4.48111 36631.5 -4965.5 -154.034 3843.43 -22946.3 1519.91 25263.9 8544.58 48433.2 1828.19 2982.29 -1547.01 -2693.22 -850.336 -80.6919 23.6937 -38.8587 9.26863 -2.40539 -27.857 -4.29123 -48.2184 -4451.75 -137.172 -429.51 -39.3508 -962.342 -1600.41 -680.612 -390.695; -1738.82 -17.1353 -783.006 600.139 2129.93 452.169 -307.672 -298.694 12.0281 10.1466 -56031.2 -9519.37 170.088 -34570.7 -60373.9 1703.31 8544.58 283727.0 80669.9 9458.82 110152.0 -3838.0 -7288.29 -2412.21 -462.363 -77.1559 -446.972 -35.0436 -513.906 -180.944 -27.2764 -2033.71 -19630.9 -377.515 -1753.78 -4.78232 -2179.33 -3735.1 -1230.12 -227.108; -4059.97 282.939 -117.199 1821.36 1314.34 1185.28 -258.751 -518.046 36.5038 20.8054 260544.0 -15342.6 -391.233 3700.0 -74522.8 5289.77 48433.2 80669.9 4.0918e6 9389.24 35614.8 -1914.0 -3658.51 426.237 201.297 196.819 322.609 114.854 308.384 40.7102 0.491493 1250.08 1418.13 -278.695 3824.8 114.3 -7400.21 -8696.38 -2496.39 -398.769; -185.452 8.69446 -28.4303 81.0792 110.576 63.3387 -17.0372 -30.9505 1.625 0.61082 2326.28 -1122.16 -2.81221 -1761.36 -6187.19 245.732 1828.19 9458.82 9389.24 1390.81 4834.52 -331.737 -620.227 -189.264 -27.6092 0.807469 -20.1676 2.66899 -15.9117 -9.17032 -1.7236 -92.0759 -1358.13 -33.5138 -56.0105 3.28395 -294.764 -36.4572 -158.001 -46.8296; -867.636 -2.39172 -387.849 306.821 1082.95 169.266 -146.62 -139.182 6.14935 5.29865 -19559.4 -4539.18 64.2443 -15386.2 -27992.4 582.909 2982.29 110152.0 35614.8 4834.52 72359.4 -1635.98 -3100.12 -1048.25 -193.732 -28.3007 -205.116 -9.47012 -229.63 -85.4073 -13.7494 -920.331 -8449.54 -170.335 -627.633 13.4852 -1089.11 -1942.19 -562.565 -234.123; 82.4917 0.0595283 1.49597 -42.4976 -58.7137 -51.9077 12.0486 50.2203 -0.851743 0.360391 18095.8 1841.29 76.3766 11726.2 17959.2 -209.056 -1547.01 -3838.0 -1914.0 -331.737 -1635.98 2852.84 4187.59 2064.03 294.337 36.1772 149.29 25.7186 96.8303 56.6876 6.7833 657.937 6167.79 139.667 945.301 56.0936 -305.449 -71.8432 504.774 124.583; 136.187 2.95614 1.23138 -71.0086 -105.922 -89.499 22.5951 92.7056 -1.42316 0.657425 38322.7 3281.51 135.598 22946.5 35029.2 -379.064 -2693.22 -7288.29 -3658.51 -620.227 -3100.12 4187.59 9838.88 3240.58 407.667 67.3141 280.328 32.4475 182.107 92.6506 10.0301 959.8 11023.4 263.021 1788.23 102.417 -815.755 -257.391 961.563 192.512; 26.406 5.28949 -6.643 -12.7187 -32.0421 -26.1148 6.2727 33.6626 -0.254911 0.39617 19310.2 1116.25 60.1589 9446.82 14137.1 -124.586 -850.336 -2412.21 426.237 -189.264 -1048.25 2064.03 3240.58 16707.6 238.222 34.4098 131.726 21.4923 87.3625 50.6165 5.70352 596.08 4908.57 104.484 727.12 40.9646 -407.075 -179.336 356.652 72.6714; 1.40397 1.30354 -0.781987 -0.28228 -4.9292 -2.964 1.17099 4.6261 -0.00565748 0.0846198 3651.7 184.678 8.65614 1121.97 1619.85 -16.4733 -80.6919 -462.363 201.297 -27.6092 -193.732 294.337 407.667 238.222 673.392 6.57914 29.3481 5.79827 18.0457 9.86515 2.46673 111.205 824.233 19.8427 126.437 7.63286 6.39379 -4.85453 52.0851 16.7189; -3.57344 0.642044 0.053527 1.48416 -0.0544992 0.719832 0.177604 0.362995 0.0297457 0.0237424 1583.94 4.91557 0.683822 334.785 383.113 1.04446 23.6937 -77.1559 196.819 0.807469 -28.3007 36.1772 67.3141 34.4098 6.57914 7.19116 4.42624 0.595041 2.88375 0.975865 0.151762 11.877 117.214 2.39413 20.5918 1.03928 0.279619 -1.74612 5.64386 3.53813; 1.2174 1.16552 -0.862209 0.581616 -4.496 -2.25155 0.901709 3.15483 0.0116568 0.0312216 2195.64 138.671 6.25899 611.315 1004.67 -6.04454 -38.8587 -446.972 322.609 -20.1676 -205.116 149.29 280.328 131.726 29.3481 4.42624 177.187 2.93395 25.7297 9.37835 1.92783 96.6423 590.793 17.0215 108.569 7.54139 1.95794 -8.38494 37.5589 13.4993; -0.00153407 0.156855 -0.649348 0.548474 -0.254622 0.0432487 0.0191987 0.381395 0.0109926 0.0174646 176.581 11.9901 0.177213 12.3354 35.8523 0.731751 9.26863 -35.0436 114.854 2.66899 -9.47012 25.7186 32.4475 21.4923 5.79827 0.595041 2.93395 12.9515 5.09837 1.9689 0.314158 18.3503 97.6393 2.98119 17.1874 1.24426 0.070958 1.1285 4.68344 1.95973; 4.55616 0.808941 -0.750509 0.253515 -5.41301 -2.84354 1.0871 2.04337 0.00508099 0.0157598 937.106 86.1496 2.97253 101.979 297.822 -0.272626 -2.40539 -513.906 308.384 -15.9117 -229.63 96.8303 182.107 87.3625 18.0457 2.88375 25.7297 5.09837 45.3012 14.443 2.59783 130.9 680.277 32.4559 157.128 14.1056 2.63066 -8.37783 26.512 18.1386; 5.24703 0.00155007 -0.829846 -0.521617 -2.73442 -2.47205 0.372968 1.18866 -0.0104543 0.0123762 156.523 57.7354 1.79702 -227.948 -30.2857 -1.22774 -27.857 -180.944 40.7102 -9.17032 -85.4073 56.6876 92.6506 50.6165 9.86515 0.975865 9.37835 1.9689 14.443 20.4919 1.69705 82.7362 425.973 23.5434 91.2498 8.51693 -14.9579 -10.3597 23.8204 10.2062; 0.794533 -0.012787 -0.0757563 -0.117003 -0.407504 -0.363481 0.0755337 0.1635 -0.00234499 0.000820948 -7.84925 8.52366 0.242115 -30.4766 -9.30024 -0.354696 -4.29123 -27.2764 0.491493 -1.7236 -13.7494 6.7833 10.0301 5.70352 2.46673 0.151762 1.92783 0.314158 2.59783 1.69705 0.623761 11.7464 64.8969 3.58272 15.5765 1.24924 0.0826194 -0.467023 3.55192 1.5134; 34.0624 2.10071 -6.82546 -0.428823 -24.7701 -18.7281 4.07205 12.0428 -0.00859452 0.0760552 4330.25 565.093 11.9051 -1051.09 847.58 -11.7812 -48.2184 -2033.71 1250.08 -92.0759 -920.331 657.937 959.8 596.08 111.205 11.877 96.6423 18.3503 130.9 82.7362 11.7464 902.445 3605.29 160.553 712.672 59.4234 -261.849 -113.448 189.936 134.357; 275.117 19.2596 14.8067 -96.1591 -260.211 -209.242 85.9525 161.715 -1.92723 0.94455 63350.4 6421.35 192.457 14839.3 35253.8 -676.115 -4451.75 -19630.9 1418.13 -1358.13 -8449.54 6167.79 11023.4 4908.57 824.233 117.214 590.793 97.6393 680.277 425.973 64.8969 3605.29 43921.6 1498.26 7164.12 515.754 77.3922 61.9871 1713.99 445.617; 12.7115 0.121684 -0.855958 -4.34802 -6.78207 -7.21996 2.15782 4.56473 -0.0871436 0.0268175 1256.71 181.059 6.74848 391.072 953.293 -22.8871 -137.172 -377.515 -278.695 -33.5138 -170.335 139.667 263.021 104.484 19.8427 2.39413 17.0215 2.98119 32.4559 23.5434 3.58272 160.553 1498.26 72.3594 333.389 23.2966 3.15481 7.89436 57.9209 7.87936; -5.66861 6.38617 1.29595 -6.94313 -19.2332 -19.0428 18.0136 23.563 -0.139155 0.214282 13369.4 1056.93 41.3906 3544.41 4095.11 -87.4005 -429.51 -1753.78 3824.8 -56.0105 -627.633 945.301 1788.23 727.12 126.437 20.5918 108.569 17.1874 157.128 91.2498 15.5765 712.672 7164.12 333.389 2468.4 196.381 -133.452 -105.869 345.578 86.6313; 2.05386 0.234376 -0.483559 -1.11224 -0.803057 -2.16383 1.08615 1.57517 -0.0222915 0.0189135 701.847 81.9987 5.89378 96.4133 184.705 -8.75451 -39.3508 -4.78232 114.3 3.28395 13.4852 56.0936 102.417 40.9646 7.63286 1.03928 7.54139 1.24426 14.1056 8.51693 1.24924 59.4234 515.754 23.2966 196.381 48.7229 4.90391 6.93284 22.0869 6.13901; 154.642 -8.15255 -24.1314 -53.6359 -37.7543 -51.32 -8.23311 22.9257 -1.07498 0.0886939 -12427.3 284.749 3.32822 -3651.25 -3008.68 -168.207 -962.342 -2179.33 -7400.21 -294.764 -1089.11 -305.449 -815.755 -407.075 6.39379 0.279619 1.95794 0.070958 2.63066 -14.9579 0.0826194 -261.849 77.3922 3.15481 -133.452 4.90391 23563.6 11595.1 -29.2813 530.583; 123.795 -4.04982 -12.5494 -45.2965 -50.6202 -36.8568 -2.56785 17.5925 -0.907838 -0.50001 -5528.78 52.7466 7.71217 -1469.35 -408.287 -107.63 -1600.41 -3735.1 -8696.38 -36.4572 -1942.19 -71.8432 -257.391 -179.336 -4.85453 -1.74612 -8.38494 1.1285 -8.37783 -10.3597 -0.467023 -113.448 61.9871 7.89436 -105.869 6.93284 11595.1 8314.4 -30.2083 4.61225; 54.3853 -3.03955 0.475989 -26.2127 -24.3534 -25.9613 3.69478 19.9263 -0.525357 0.0371605 517.623 1042.7 47.1314 1936.79 3774.85 -91.8228 -680.612 -1230.12 -2496.39 -158.001 -562.565 504.774 961.563 356.652 52.0851 5.64386 37.5589 4.68344 26.512 23.8204 3.55192 189.936 1713.99 57.9209 345.578 22.0869 -29.2813 -30.2083 1125.33 137.083; 30.8647 -1.89407 -2.49825 -13.2777 -10.3119 -11.4755 -0.581891 7.54229 -0.266114 0.0635709 2536.04 406.721 31.9789 -198.237 703.121 -28.7346 -390.695 -227.108 -398.769 -46.8296 -234.123 124.583 192.512 72.6714 16.7189 3.53813 13.4993 1.95973 18.1386 10.2062 1.5134 134.357 445.617 7.87936 86.6313 6.13901 530.583 4.61225 137.083 7918.37]
    dist = CompositionNormal(μ, Σ)
    ca = CompositionArray(rand(dist, 10000))
    (c,m,e) = bin_bsr(ca.SiO2, ca, 40, 80, 4)
    @test c == 45:10:75
    @test m isa CompositionArray{NCKFMASHTOtrace{Float64}}
    @test m.SiO2 ≈ [46.7, 55.5, 64.0, 72.0] atol=10
    @test m.TiO2 ≈ [1.65, 1.12, 0.607, 0.125] atol= 1
    @test m.Al2O3 ≈ [14.8, 14.6, 14.4, 14.1] atol=2
    @test m.FeO ≈ [10.6, 7.37, 4.32, 1.52] atol=2
    @test e isa Array{Float64,3}

## -- bin_bsr_ratios

    x = 0:100; num = 0:100; denom=reverse(num)
    xmin = 0; xmax = 100; nbins = 5
    step = (xmax-xmin)/nbins
    (c,m,el,eu) = bin_bsr_ratios(x, num, denom, xmin, xmax, nbins, x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [0.11, 0.43, 1.0, 2.33, 8.99], rtol=0.1)
    @test isapprox(el, [0.03, 0.05, 0.09, 0.26, 2.11], rtol=0.4)
    @test isapprox(eu, [0.03, 0.05, 0.1, 0.29, 3.03], rtol=0.4)

    (c,m,el,eu) = bin_bsr_ratios(x, num, denom, xmin:step:xmax, x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [0.11, 0.43, 1.0, 2.33, 8.99], rtol=0.1)
    @test isapprox(el, [0.03, 0.05, 0.09, 0.26, 2.11], rtol=0.4)
    @test isapprox(eu, [0.03, 0.05, 0.1, 0.29, 3.03], rtol=0.4)

    # With weights
    (c,m,el,eu) = bin_bsr_ratios(x, num, denom, xmin, xmax, nbins, ones(101), x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [0.11, 0.43, 1.0, 2.33, 8.99], rtol=0.1)
    @test isapprox(el, [0.03, 0.05, 0.09, 0.26, 2.11], rtol=0.4)
    @test isapprox(eu, [0.03, 0.05, 0.1, 0.29, 3.03], rtol=0.4)

    # Medians
    (c,m,el,eu) = bin_bsr_ratio_medians(x, num, denom, xmin, xmax, nbins, x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [0.11, 0.43, 1.0, 2.34, 9.25], rtol=0.1)
    @test isapprox(el, [0.05, 0.08, 0.15, 0.4, 3.1], rtol=0.5)
    @test isapprox(eu, [0.05, 0.09, 0.17, 0.51, 6.42], rtol=0.5)

## --- Constant silica reference model

    N = 10000
    SiO2 = rand(N) * 40 .+ 40
    Age = rand(N) * 3800
    Y = 1 .+ rand(N) .* (SiO2 .- 40)./10 .* (4000 .- Age)./1000
    ds = (; Y=Y, Age=Age, SiO2=SiO2, Y_sigma=Y*0.05, Age_sigma=Age*0.05)

    c,m,el,eu = constproportion(bin_bsr_means, ds, "Age", "Y", 0, 4000, 8)
    @test c == 250:500:3750
    @test round.(m, sigdigits=2) ≈  [4.9, 4.4, 3.8, 3.4, 2.8, 2.3, 1.8, 1.4] rtol=0.2
    @test round.(el, sigdigits=2) ≈ [0.12, 0.1, 0.091, 0.08, 0.063, 0.043, 0.029, 0.021] rtol=0.2
    @test round.(eu, sigdigits=2) ≈ [0.12, 0.1, 0.092, 0.074, 0.062, 0.043, 0.03, 0.023] rtol=0.2

    Num = 10 .+ rand(N) .* (SiO2 .- 40)./10 .* (4000 .- Age)./1000
    Denom = 100 .- rand(N) .* (SiO2 .- 40)./10 .* Age./1000
    ds = (; ds..., Num=Num, Denom=Denom, Num_sigma=0.05Num, Denom_sigma=0.05Denom)

    c,m,el,eu = constproportion(bin_bsr_ratio_medians, ds, "Age", "Num", "Denom", 0, 4000, 8)
    @test c == 250:500:3750
    @test round.(m, sigdigits=2) ≈ [0.14, 0.13, 0.13, 0.12, 0.12, 0.12, 0.11, 0.11] rtol=0.2
    @test round.(el, sigdigits=2) ≈ [0.0019, 0.0018, 0.0016, 0.0014, 0.0011, 0.00087, 0.00073, 0.00084] rtol=0.2
    @test round.(eu, sigdigits=2) ≈ [0.002, 0.0018, 0.0017, 0.0013, 0.0011, 0.00089, 0.00076, 0.00083] rtol=0.2


## --- Monte Carlo interpolation/fitting

    (c,m) = mcfit(0:11, ones(12), 0:11, ones(12), 1, 10, 10)
    @test c == 1:10
    @test isapprox(m, [1.15, 2.02, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 8.98, 9.85], atol = 0.25)

## --- Downsampling

    @test downsample(1:100, 10) == 10:10:100
    A = reshape(1:100,10,10)
    @test downsample(A, 2) == [12 32 52 72 92; 14 34 54 74 94; 16 36 56 76 96; 18 38 58 78 98; 20 40 60 80 100]
    @test downsample(collect(A), 2) == [12 32 52 72 92; 14 34 54 74 94; 16 36 56 76 96; 18 38 58 78 98; 20 40 60 80 100]

## ---
