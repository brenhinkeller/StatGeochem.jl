## --- Resampling.jl

    index = Array{Int64}(undef,1000)
    resampled = Array{Int64}(undef,1000)
    @test bsr!(resampled,index,1:10,0,0.5) |> unique ⊆ 1:10
    @test bsr!(resampled,index,1:10,0,fill(0.5,1000)) |> unique ⊆ 1:10
    @test bsr!(resampled,index,1:10,fill(0,10),0.5) |> unique ⊆ 1:10
    @test bsr!(resampled,index,1:10,fill(0,10),fill(0.5,1000)) |> unique ⊆ 1:10

    index = Array{Int64}(undef,1000)
    resampled = Array{Int64}(undef,1000,10)
    data = repeat(1:10,1,10)
    @test vec(bsr!(resampled,index,data,zeros(10),0.5)) |> unique ⊆ 1:10
    @test vec(bsr!(resampled,index,data,zeros(10),fill(0.5,10))) |> unique ⊆ 1:10

    resampled = Array{Float64}(undef,1000)
    # Gaussian
    bsr!(resampled, index, ones(10), 0.5, 0.5)
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(resampled, index, ones(10), 0.5, fill(0.5,1000))
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(resampled, index, ones(10), fill(0.5,10), 0.5)
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(resampled, index, ones(10), fill(0.5,10), fill(0.5,1000))
    @test isapprox(mean(resampled), 1, atol=0.3)
    # Other distributions
    bsr!(uniform, resampled, index, ones(10), 0.5, 0.5)
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(triangular, resampled, index, ones(10), 0.5, fill(0.5,1000))
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(triangular, resampled, index, ones(10), fill(0.5,10), 0.5)
    @test isapprox(mean(resampled), 1, atol=0.3)
    bsr!(uniform, resampled, index, ones(10), fill(0.5,10), fill(0.5,1000))
    @test isapprox(mean(resampled), 1, atol=0.3)

    @test bsresample(1:10,fill(0.5,10),1000,0.5)::Array{Float64} |> length == 1000
    @test bsresample(1:10,fill(0.5,10),1000,fill(0.5,10))::Array{Float64} |> length == 1000

    d = Dict{String,Vector{Float64}}()
    d["x"] = 1:10;  d["y"] = 2:2:20
    d["x_sigma"] = d["y_sigma"] = fill(0.5,10)
    dbs = bsresample(d, 1000, ["x","y"], 0.5)
    @test isapprox(mean(dbs["x"]), 5.5, atol=0.5)
    @test isapprox(std(dbs["x"]), 3.03, atol=0.5)
    @test isapprox(mean(dbs["y"]), 11, atol=1)
    @test isapprox(std(dbs["y"]), 6.06, atol=1)

    dt = TupleDataset(d)
    @test isa(dt, NamedTuple)
    dbs = bsresample(dt, 1000, (:x, :y), 0.5)
    @test isapprox(mean(dbs[:x]), 5.5, atol=0.5)
    @test isapprox(std(dbs[:x]), 3.03, atol=0.5)
    @test isapprox(mean(dbs[:y]), 11, atol=1)
    @test isapprox(std(dbs[:y]), 6.06, atol=1)

    @test bincounts(1:100, 0.0:10:100.0) == (5:10:95, fill(10,10))
    @test bincounts(1:100, 0, 100, 10) == (5:10:95, fill(10,10))
    c,N = bincounts(1:100, 0, 100, 10; relbinwidth=3)
    @test c == 5:10:95
    @test N == [20, 30, 30, 30, 30, 30, 30, 30, 30, 20]

    @test binmeans(1:100, 1:100, 0.0:10:100.0) == (5:10:95, 5.5:10:95.5, fill(0.9574271077563381,10))
    @test binmeans(1:100, 1:100, 0, 100, 10) == (5:10:95, 5.5:10:95.5, fill(0.9574271077563381,10))
    c,m,e = binmeans(1:100, 1:100, 0, 100, 10; relbinwidth=3)
    @test c == 5:10:95
    @test m == [10.5, 15.5, 25.5, 35.5, 45.5, 55.5, 65.5, 75.5, 85.5, 90.5]
    @test e ≈ [1.3228756555322954, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.3228756555322954]
    @test binmeans(1:100, 1:100, 0, 100, 10, ones(100)) == (5:10:95, 5.5:10:95.5, fill(0.9574271077563381,10))
    c,m,e = binmeans(1:100, 1:100, 0, 100, 10, ones(100); relbinwidth=3)
    @test c == 5:10:95
    @test m == [10.5, 15.5, 25.5, 35.5, 45.5, 55.5, 65.5, 75.5, 85.5, 90.5]
    @test e ≈ [1.3228756555322954, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.607275126832159, 1.3228756555322954]

    @test binmedians(1:100,1:100,0.0:10:100.0) == (5:10:95, 5.5:10:95.5, fill(1.1720982147414096,10))
    @test binmedians(1:100,1:100,0,100,10) == (5:10:95, 5.5:10:95.5, fill(1.1720982147414096,10))
    c,m,e = binmedians(1:100, 1:100, 0, 100, 10; relbinwidth=3)
    @test c == 5:10:95
    @test m == [10.5, 15.5, 25.5, 35.5, 45.5, 55.5, 65.5, 75.5, 85.5, 90.5]
    @test e ≈ [1.6575971917205938, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 2.030133659392898, 1.6575971917205938]

    @test randsample(1:10., 1000, rand(1000))::Array{Float64} |> length == 1000
    @test randsample(1:10, 1000)::Array{Int64} |> length == 1000
    @test unique(randsample(1:10, 1000)) ⊆ 1:10

    dr = randsample(d, 1000, ["x","y"], 0.5)
    @test isapprox(mean(dr["x"]), 5.5, atol=0.5)
    @test isapprox(std(dr["x"]), 3.03, atol=0.5)
    @test unique(dr["x"]) ⊆ 1:10
    @test isapprox(mean(dr["y"]), 11, atol=1)
    @test isapprox(std(dr["y"]), 6.06, atol=1)
    @test unique(dr["y"]) ⊆ 2:2:20

## --- Invweight

    @test invweight(0:10,0:10,0:10) ≈ [13.092772378121769, 13.759663290331229, 14.079390874013654, 14.244556812410089, 14.327747696132253, 14.354508911206949, 14.331218676773712, 14.251150311763046, 14.088257739618454, 13.76917452212827, 13.101581593462868]
    @test invweight_location(0:10,0:10) ≈ [2.3478642777118957, 2.950680392065609, 3.2200556525889006, 3.348975353894235, 3.4103053158720016, 3.4297605864726126, 3.413776296513463, 3.3555688532471923, 3.2289225181937002, 2.9601916238626513, 2.3566734930529947]
    @test invweight_age(0:10) ≈ [10.744908100409873, 10.808982898265619, 10.859335221424754, 10.895581458515855, 10.91744238026025, 10.924748324734335, 10.91744238026025, 10.895581458515855, 10.859335221424754, 10.808982898265619, 10.744908100409873]
    @test invweight(3:7, 3:7, 3:7, spatialscale=1:3, agescale=20:10:40) ≈ [6.455459194232295 6.4954174826726305 6.50970747669241; 7.221911822727031 7.261870111167367 7.276160105187145; 7.829876642142075 7.86983493058241 7.8841249246021885;;; 6.795239175454396 6.815587062014095 6.822796065519029; 7.814257428828995 7.8346053153886945 7.841814318893627; 8.464965591963413 8.485313478523112 8.492522482028043;;; 6.866607765314396 6.880327963335503 6.88516052627444; 7.9787064574491104 7.992426655470217 7.9972592184091535; 8.67354089449909 8.687261092520199 8.692093655459136;;; 6.796516961665698 6.816864848225396 6.82407385173033; 7.81538067459392 7.835728561153617 7.84293756465855; 8.46552963870305 8.485877525262747 8.49308652876768;;; 6.456852342594404 6.496810631034739 6.511100625054519; 7.223828686779423 7.263786975219759 7.278076969239537; 7.831650416268091 7.871608704708425 7.885898698728204]

    # Test NaN-ful cases
    lat, lon, age = [0:10..., NaN], [0:10..., NaN], [0:10..., NaN]
    @test invweight(lat, lon, age) ≈ [13.092772378121769, 13.759663290331229, 14.079390874013654, 14.244556812410089, 14.327747696132253, 14.354508911206949, 14.331218676773712, 14.251150311763046, 14.088257739618454, 13.76917452212827, 13.101581593462868, Inf]
    @test invweight_location(lat, lon) ≈ [2.3478642777118957, 2.950680392065609, 3.2200556525889006, 3.348975353894235, 3.4103053158720016, 3.4297605864726126, 3.413776296513463, 3.3555688532471923, 3.2289225181937002, 2.9601916238626513, 2.3566734930529947, Inf]
    @test invweight_age(age) ≈ [10.744908100409873, 10.808982898265619, 10.859335221424754, 10.895581458515855, 10.91744238026025, 10.924748324734335, 10.91744238026025, 10.895581458515855, 10.859335221424754, 10.808982898265619, 10.744908100409873, Inf]

    @test resamplingprobability(invweight(lat, lon, age)) ≈ [0.17709468716990867, 0.16997032242046156, 0.1667541264064975, 0.16513990970091127, 0.16433863731114293, 0.1640825308282905, 0.16430537469842987, 0.16507611788372856, 0.16666666666666666, 0.16987285789479709, 0.17699668840192856, 0.0]
    @test resamplingprobability(invweight_location(lat, lon)) ≈ [0.2157181923483138, 0.1795609083825818, 0.16704894086177344, 0.1616579035210186, 0.15921356093554181, 0.158453529370978, 0.1590774311384848, 0.16139152082816496, 0.16666666666666666, 0.17908729309480173, 0.21508527491483678, 0.0]
    @test resamplingprobability(invweight_age(age)) ≈ [0.16814313324769609, 0.1673131616109112, 0.16666666666666666, 0.16620436987522427, 0.16592678603901323, 0.16583422381194865, 0.16592678603901323, 0.16620436987522427, 0.16666666666666666, 0.1673131616109112, 0.16814313324769609, 0.0]

## --- bin_bsr

    x = 0:100; y = 0:100
    xmin = 0; xmax = 100; nbins = 5
    step = (xmax-xmin)/nbins
    (c,m,e) = bin_bsr(x, y, xmin, xmax, nbins, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(e, [1.17, 1.21, 1.23, 1.26, 1.28], atol=0.5)

    (c,m,e) = bin_bsr(x, y, xmin:step:xmax, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(e, [1.17, 1.21, 1.23, 1.26, 1.28], atol=0.5)

    # Upper and lower CIs
    (c,m,el,eu) = bin_bsr(nanbinmean!, x, y, xmin, xmax, nbins, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(el, [2.29, 2.38, 2.41, 2.49, 2.51], atol=1.0)
    @test isapprox(eu, [2.3, 2.37, 2.42, 2.51, 2.51], atol=1.0)

    # Upper and lower CIs
    (c,m,el,eu) = bin_bsr(nanbinmean!, x, y, xmin:step:xmax, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(el, [2.29, 2.38, 2.41, 2.49, 2.51], atol=1.0)
    @test isapprox(eu, [2.3, 2.37, 2.42, 2.51, 2.51], atol=1.0)

    # Medians, upper and lower CIs
    (c,m,el,eu) = bin_bsr(nanbinmedian!, x, y, xmin, xmax, nbins, x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.01, 29.91, 49.9, 69.88, 89.79], atol=1)
    @test isapprox(el, [4.01, 3.91, 3.9, 3.88, 3.79], atol=2)
    @test isapprox(eu, [3.99, 4.09, 4.1, 4.12, 4.21], atol=2)

    # with weights
    w = ones(101)
    (c,m,e) = bin_bsr(x, y, xmin, xmax, nbins, w, x_sigma=ones(101), y_sigma=zeros(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [10.04, 29.94, 49.94, 69.92, 89.83], atol=0.5)
    @test isapprox(e, [1.17, 1.21, 1.23, 1.26, 1.28], atol=0.5)

    # with 2-D array (matrix) of y data
    y = repeat(0:100, 1, 4)
    y_sigma = ones(101,4)
    (c,m,e) = bin_bsr(x, y, xmin, xmax, nbins, x_sigma=ones(101), y_sigma=y_sigma)
    @test c == 10.0:20.0:90.0
    @test isapprox(m, repeat([10.04, 29.94, 49.94, 69.92, 89.83], 1, 4), atol=0.5)
    @test isapprox(e, repeat([1.17, 1.21, 1.23, 1.26, 1.28], 1, 4), atol=0.5)

    (c,m,el,eu) = bin_bsr(x, y, xmin, xmax, nbins, x_sigma=ones(101), y_sigma=y_sigma, sem=:CI)
    @test c == 10.0:20.0:90.0
    @test isapprox(m, repeat([10.04, 29.94, 49.94, 69.92, 89.83], 1, 4), atol=0.5)
    @test isapprox(el, repeat([2.29, 2.38, 2.41, 2.49, 2.51], 1, 4), atol=1.0)
    @test isapprox(eu, repeat([2.3, 2.37, 2.42, 2.51, 2.51], 1, 4), atol=1.0)

    # with CompositionArray
    μ = NCKFMASHTOlogtrace{Float64}(60.072025289335684, 1.059083288330563, 15.257593710407056, 7.052027377050142, 4.711705761182858, 6.086117439525022, 3.379148338738595, 2.4581002824407934, 0.14133757130691516, 4.113083109875368, 6.69454109519531, 3.601112673969584, 0.26561591283520564, 5.663362770520005, 5.943320889300578, 2.657429507962731, 4.64088393795355, 3.9154066739705002, 6.764427809159433, 2.8757064608892438, 3.6092879478349724, 3.163025718517903, 3.862654723921802, 3.1934890322056235, 1.605580323488479, 0.2641240849597359, 1.5488952040911708, -0.3194048946557471, 1.4358779318509522, 0.7909989109502347, -1.1545820958799191, 3.13937715648506, 4.981671305540169, 1.3663021868860319, 2.5362170028496296, -0.16956082027158326, 1.2110952084897242, 1.139243381650485, 1.47421879235778, 0.28481238868934394)
    Σ = [104.26 -6.1471 -2.9993 -37.538 -34.626 -34.624 3.8017 11.714 -0.75234 -0.030156 -4.4854 7.7333 5.0237 -3.3995 3.3493 -7.3316 -9.4512 -12.617 -5.3143 -10.317 -10.537 3.7016 3.1097 1.5822 0.56669 -2.4298 -0.26101 -0.35871 -0.26945 0.5056 0.48743 0.019579 1.6553 2.3372 0.52339 1.1545 2.883 0.36659 7.4551 6.1441; -6.1471 0.90144 0.011712 2.7476 1.252 1.9662 -0.083933 -0.65221 0.055068 0.018863 0.58444 -0.3394 -0.40522 0.35722 0.0040544 0.46436 0.65134 0.51324 0.33852 0.59687 0.46805 0.084236 0.12233 0.1843 0.25022 0.41536 0.27019 0.2455 0.26076 0.10267 0.092353 0.16508 0.18817 0.13303 0.35452 0.33982 -0.1129 -0.14719 -0.25328 -0.2629; -2.9993 0.011712 8.5667 -1.7444 -6.1184 1.045 1.455 0.085025 -0.034961 0.029922 0.65464 0.35681 -0.12066 1.478 0.77789 0.050977 0.2482 -1.3472 0.021729 -0.27727 -1.3822 0.22091 0.20306 0.1126 0.10118 0.36376 0.084969 -0.12034 0.10189 -0.10204 -0.056615 -0.047734 0.26597 -0.01595 0.0089383 -0.3216 -0.01821 -0.23447 0.040379 0.13635; -37.538 2.7476 -1.7444 18.009 12.594 12.205 -1.9587 -5.2721 0.36094 0.04997 1.623 -3.3666 -2.2899 0.4952 -1.714 3.1282 3.8378 4.5684 2.2513 4.2066 3.9338 -1.542 -1.278 -0.6025 -0.067565 1.0182 0.30854 0.50293 0.46743 0.29366 0.31235 0.37772 -0.53705 -0.72934 -0.28133 -0.37005 -0.90189 -0.17653 -3.2082 -2.6872; -34.626 1.252 -6.1184 12.594 25.285 11.078 -3.4808 -5.2849 0.25241 0.13392 0.23933 -4.0084 -1.7175 -0.67306 -2.732 2.5227 2.9918 7.398 1.742 4.2405 6.5048 -2.6991 -2.4548 -1.6949 -1.3494 -0.38985 -0.99281 -0.60865 -1.0601 -0.76947 -0.77377 -0.69365 -1.8324 -1.6925 -1.3358 -1.1924 -1.4943 0.11949 -3.5795 -2.9388; -34.624 1.9662 1.045 12.205 11.078 15.833 -1.8826 -5.346 0.24461 0.080184 1.3432 -3.3049 -2.238 1.343 -1.5208 2.8461 3.5634 4.6922 1.8031 3.7399 3.7335 -1.8466 -1.6149 -0.9948 -0.51983 0.6429 -0.14047 -0.097399 -0.066375 -0.33553 -0.29983 -0.16708 -0.97851 -1.2322 -0.83816 -1.134 -1.2162 -0.36536 -3.2175 -2.6643; 3.8017 -0.083933 1.455 -1.9587 -3.4808 -1.8826 1.8574 0.37587 -0.039257 -0.015665 0.15379 0.49432 0.072655 0.3611 0.42807 -0.45935 -0.43915 -1.1273 -0.2024 -0.63037 -0.96571 0.50908 0.48871 0.35702 0.28076 0.1653 0.18136 0.10949 0.17007 0.058866 0.083375 0.081409 0.43485 0.40342 0.45568 0.41198 0.025547 -0.20428 0.57956 0.48528; 11.714 -0.65221 0.085025 -5.2721 -5.2849 -5.346 0.37587 4.3039 -0.10566 -0.02098 -0.17077 2.269 1.5616 -0.14905 1.2212 -1.2478 -1.373 -1.9393 -0.63978 -1.6411 -1.6034 1.4186 1.2949 0.96413 0.69535 0.10783 0.46146 0.35139 0.31728 0.28936 0.25879 0.30763 0.75201 0.81768 0.98465 1.0567 0.73996 0.55682 2.0891 1.7434; -0.75234 0.055068 -0.034961 0.36094 0.25241 0.24461 -0.039257 -0.10566 0.0072339 0.0010015 0.032529 -0.067473 -0.045894 0.0099249 -0.034352 0.062696 0.076918 0.091561 0.04512 0.084309 0.078841 -0.030904 -0.025614 -0.012075 -0.0013542 0.020406 0.0061837 0.01008 0.0093683 0.0058856 0.0062602 0.0075703 -0.010764 -0.014618 -0.0056385 -0.0074167 -0.018076 -0.003538 -0.064299 -0.053857; -0.030156 0.018863 0.029922 0.04997 0.13392 0.080184 -0.015665 -0.02098 0.0010015 0.025801 0.017287 -0.018237 0.014248 0.0065185 -0.0041687 0.020518 0.025183 0.037638 0.019397 0.026376 0.037352 0.0018391 0.0021711 0.0079954 0.010256 0.014703 0.0074024 0.00883 0.0052809 0.00673 0.0066264 0.005292 0.0026609 0.0045624 0.0049496 0.0069997 0.0015191 0.015513 -0.0029599 0.00031372; -4.4854 0.58444 0.65464 1.623 0.23933 1.3432 0.15379 -0.17077 0.032529 0.017287 0.97084 0.083823 -0.16533 0.70401 0.4759 0.30789 0.48977 0.17342 0.2413 0.3406 0.18218 0.38048 0.3996 0.38367 0.3613 0.48185 0.31799 0.23328 0.22127 0.059828 0.04247 0.14633 0.31221 0.2158 0.4089 0.34895 -0.056689 -0.20322 0.14291 0.081576; 7.7333 -0.3394 0.35681 -3.3666 -4.0084 -3.3049 0.49432 2.269 -0.067473 -0.018237 0.083823 2.0174 1.2557 0.095103 1.0436 -0.79301 -0.84471 -1.341 -0.40997 -1.1051 -1.1403 1.036 0.93501 0.65198 0.47946 0.082236 0.34946 0.21476 0.23466 0.15354 0.14184 0.2015 0.60673 0.57476 0.82224 0.77505 0.44833 0.13378 1.5605 1.2956; 5.0237 -0.40522 -0.12066 -2.2899 -1.7175 -2.238 0.072655 1.5616 -0.045894 0.014248 -0.16533 1.2557 2.1961 -0.20218 0.46154 -0.54871 -0.5468 -0.60723 -0.24431 -0.58151 -0.58404 0.61752 0.51476 0.39208 0.27573 -0.081767 0.1618 0.11272 0.059901 0.097842 0.099767 0.041294 0.21489 0.37591 0.42796 0.61276 0.39915 0.89839 1.196 1.2094; -3.3995 0.35722 1.478 0.4952 -0.67306 1.343 0.3611 -0.14905 0.0099249 0.0065185 0.70401 0.095103 -0.20218 1.4379 0.84547 0.22263 0.43599 0.029131 0.087301 0.27769 -0.05086 0.33868 0.32946 0.26218 0.20603 0.45865 0.12592 -0.0048118 0.018669 -0.21512 -0.22088 -0.10935 0.1857 0.057734 0.12683 -0.0027301 0.0245 -0.1806 0.067241 -0.0028898; 3.3493 0.0040544 0.77789 -1.714 -2.732 -1.5208 0.42807 1.2212 -0.034352 -0.0041687 0.4759 1.0436 0.46154 0.84547 1.6549 -0.29543 -0.3141 -0.85623 -0.23747 -0.46559 -0.72413 0.87081 0.8018 0.60402 0.4419 0.41574 0.28702 0.16203 0.13351 -0.0020769 -0.02326 0.06201 0.47963 0.42761 0.45919 0.43758 0.22551 -0.15054 0.93611 0.73182; -7.3316 0.46436 0.050977 3.1282 2.5227 2.8461 -0.45935 -1.2478 0.062696 0.020518 0.30789 -0.79301 -0.54871 0.22263 -0.29543 0.95683 0.86068 1.1415 0.43814 1.0191 0.83365 -0.43325 -0.37854 -0.22268 -0.10544 0.21477 -0.010155 0.036063 0.065221 0.037106 0.025782 0.036374 -0.18809 -0.29178 -0.2942 -0.41144 -0.25861 -0.21638 -0.83356 -0.72729; -9.4512 0.65134 0.2482 3.8378 2.9918 3.5634 -0.43915 -1.373 0.076918 0.025183 0.48977 -0.84471 -0.5468 0.43599 -0.3141 0.86068 1.5982 1.3456 0.51365 1.069 1.0419 -0.45803 -0.39645 -0.23387 -0.086909 0.20329 -0.01439 0.013331 0.0268 -0.062285 -0.038595 -0.0012354 -0.21445 -0.2805 -0.23166 -0.28245 -0.17444 -0.043452 -0.83739 -0.67516; -12.617 0.51324 -1.3472 4.5684 7.398 4.6922 -1.1273 -1.9393 0.091561 0.037638 0.17342 -1.341 -0.60723 0.029131 -0.85623 1.1415 1.3456 3.6487 0.61237 1.7831 2.4334 -0.85746 -0.77312 -0.52188 -0.37704 -0.011125 -0.27163 -0.16063 -0.27589 -0.28921 -0.25636 -0.23403 -0.57174 -0.55652 -0.45797 -0.42859 -0.46499 0.11193 -1.2738 -1.0254; -5.3143 0.33852 0.021729 2.2513 1.742 1.8031 -0.2024 -0.63978 0.04512 0.019397 0.2413 -0.40997 -0.24431 0.087301 -0.23747 0.43814 0.51365 0.61237 0.53769 0.54627 0.49943 -0.17648 -0.14497 -0.054948 0.01693 0.1579 0.073537 0.090955 0.1045 0.078932 0.085006 0.088288 -0.054902 -0.084435 0.019292 -0.016306 -0.16991 -0.063029 -0.40069 -0.30981; -10.317 0.59687 -0.27727 4.2066 4.2405 3.7399 -0.63037 -1.6411 0.084309 0.026376 0.3406 -1.1051 -0.58151 0.27769 -0.46559 1.0191 1.069 1.7831 0.54627 1.8144 1.3668 -0.52424 -0.49273 -0.28897 -0.19785 0.24886 -0.11831 -0.048366 -0.035282 -0.11615 -0.15065 -0.092197 -0.32099 -0.36102 -0.32646 -0.35019 -0.23649 0.29005 -1.0484 -0.88689; -10.537 0.46805 -1.3822 3.9338 6.5048 3.7335 -0.96571 -1.6034 0.078841 0.037352 0.18218 -1.1403 -0.58404 -0.05086 -0.72413 0.83365 1.0419 2.4334 0.49943 1.3668 2.5021 -0.67232 -0.60439 -0.40428 -0.29581 -0.014427 -0.20452 -0.12209 -0.23398 -0.19564 -0.20811 -0.13318 -0.42559 -0.42663 -0.2623 -0.28225 -0.45056 -0.10073 -1.0446 -0.84198; 3.7016 0.084236 0.22091 -1.542 -2.6991 -1.8466 0.50908 1.4186 -0.030904 0.0018391 0.38048 1.036 0.61752 0.33868 0.87081 -0.43325 -0.45803 -0.85746 -0.17648 -0.52424 -0.67232 1.2824 1.1568 0.94036 0.75685 0.4915 0.57573 0.44795 0.44464 0.2974 0.25588 0.31495 0.70872 0.71928 0.93483 0.98211 0.27504 0.17184 1.3108 1.0177; 3.1097 0.12233 0.20306 -1.278 -2.4548 -1.6149 0.48871 1.2949 -0.025614 0.0021711 0.3996 0.93501 0.51476 0.32946 0.8018 -0.37854 -0.39645 -0.77312 -0.14497 -0.49273 -0.60439 1.1568 1.1117 0.88063 0.71397 0.47193 0.56942 0.43932 0.45107 0.29721 0.25463 0.32694 0.69969 0.66839 0.89282 0.90165 0.21017 0.046547 1.1825 0.90844; 1.5822 0.1843 0.1126 -0.6025 -1.6949 -0.9948 0.35702 0.96413 -0.012075 0.0079954 0.38367 0.65198 0.39208 0.26218 0.60402 -0.22268 -0.23387 -0.52188 -0.054948 -0.28897 -0.40428 0.94036 0.88063 0.80562 0.63497 0.4525 0.53756 0.42778 0.43655 0.30006 0.2591 0.32952 0.59054 0.55436 0.7725 0.76553 0.14593 0.045657 0.89524 0.71616; 0.56669 0.25022 0.10118 -0.067565 -1.3494 -0.51983 0.28076 0.69535 -0.0013542 0.010256 0.3613 0.47946 0.27573 0.20603 0.4419 -0.10544 -0.086909 -0.37704 0.01693 -0.19785 -0.29581 0.75685 0.71397 0.63497 0.61143 0.42728 0.49883 0.4363 0.43328 0.32424 0.30753 0.3319 0.51121 0.48583 0.66879 0.63821 0.20764 0.11358 0.68378 0.53641; -2.4298 0.41536 0.36376 1.0182 -0.38985 0.6429 0.1653 0.10783 0.020406 0.014703 0.48185 0.082236 -0.081767 0.45865 0.41574 0.21477 0.20329 -0.011125 0.1579 0.24886 -0.014427 0.4915 0.47193 0.4525 0.42728 0.56726 0.38294 0.30306 0.32983 0.17924 0.15579 0.20315 0.35465 0.27883 0.4325 0.34177 0.11635 0.030913 0.22267 0.12151; -0.26101 0.27019 0.084969 0.30854 -0.99281 -0.14047 0.18136 0.46146 0.0061837 0.0074024 0.31799 0.34946 0.1618 0.12592 0.28702 -0.010155 -0.01439 -0.27163 0.073537 -0.11831 -0.20452 0.57573 0.56942 0.53756 0.49883 0.38294 0.50875 0.42263 0.44437 0.3571 0.32226 0.35972 0.43193 0.38985 0.61433 0.5702 0.19697 0.085025 0.52156 0.42824; -0.35871 0.2455 -0.12034 0.50293 -0.60865 -0.097399 0.10949 0.35139 0.01008 0.00883 0.23328 0.21476 0.11272 -0.0048118 0.16203 0.036063 0.013331 -0.16063 0.090955 -0.048366 -0.12209 0.44795 0.43932 0.42778 0.4363 0.30306 0.42263 0.46879 0.41622 0.37662 0.36357 0.35359 0.35666 0.35054 0.49491 0.48607 0.1373 0.076923 0.37264 0.30413; -0.26945 0.26076 0.10189 0.46743 -1.0601 -0.066375 0.17007 0.31728 0.0093683 0.0052809 0.22127 0.23466 0.059901 0.018669 0.13351 0.065221 0.0268 -0.27589 0.1045 -0.035282 -0.23398 0.44464 0.45107 0.43655 0.43328 0.32983 0.44437 0.41622 0.48533 0.41357 0.36679 0.39449 0.3915 0.34052 0.54697 0.51231 0.19547 0.086025 0.36886 0.3238; 0.5056 0.10267 -0.10204 0.29366 -0.76947 -0.33553 0.058866 0.28936 0.0058856 0.00673 0.059828 0.15354 0.097842 -0.21512 -0.0020769 0.037106 -0.062285 -0.28921 0.078932 -0.11615 -0.19564 0.2974 0.29721 0.30006 0.32424 0.17924 0.3571 0.37662 0.41357 0.50235 0.44845 0.39464 0.27898 0.27506 0.32978 0.34059 0.071233 -0.015504 0.24841 0.24494; 0.48743 0.092353 -0.056615 0.31235 -0.77377 -0.29983 0.083375 0.25879 0.0062602 0.0066264 0.04247 0.14184 0.099767 -0.22088 -0.02326 0.025782 -0.038595 -0.25636 0.085006 -0.15065 -0.20811 0.25588 0.25463 0.2591 0.30753 0.15579 0.32226 0.36357 0.36679 0.44845 0.48159 0.36299 0.26045 0.27041 0.30715 0.33161 0.11841 0.05807 0.23568 0.23865; 0.019579 0.16508 -0.047734 0.37772 -0.69365 -0.16708 0.081409 0.30763 0.0075703 0.005292 0.14633 0.2015 0.041294 -0.10935 0.06201 0.036374 -0.0012354 -0.23403 0.088288 -0.092197 -0.13318 0.31495 0.32694 0.32952 0.3319 0.20315 0.35972 0.35359 0.39449 0.39464 0.36299 0.45847 0.32028 0.27579 0.39935 0.35847 -0.038249 -0.18833 0.26029 0.22912; 1.6553 0.18817 0.26597 -0.53705 -1.8324 -0.97851 0.43485 0.75201 -0.010764 0.0026609 0.31221 0.60673 0.21489 0.1857 0.47963 -0.18809 -0.21445 -0.57174 -0.054902 -0.32099 -0.42559 0.70872 0.69969 0.59054 0.51121 0.35465 0.43193 0.35666 0.3915 0.27898 0.26045 0.32028 0.71374 0.55643 0.68847 0.62997 0.16985 -0.039193 0.73411 0.54529; 2.3372 0.13303 -0.01595 -0.72934 -1.6925 -1.2322 0.40342 0.81768 -0.014618 0.0045624 0.2158 0.57476 0.37591 0.057734 0.42761 -0.29178 -0.2805 -0.55652 -0.084435 -0.36102 -0.42663 0.71928 0.66839 0.55436 0.48583 0.27883 0.38985 0.35054 0.34052 0.27506 0.27041 0.27579 0.55643 0.63226 0.67007 0.68473 0.20344 0.17106 0.78508 0.60357; 0.52339 0.35452 0.0089383 -0.28133 -1.3358 -0.83816 0.45568 0.98465 -0.0056385 0.0049496 0.4089 0.82224 0.42796 0.12683 0.45919 -0.2942 -0.23166 -0.45797 0.019292 -0.32646 -0.2623 0.93483 0.89282 0.7725 0.66879 0.4325 0.61433 0.49491 0.54697 0.32978 0.30715 0.39935 0.68847 0.67007 1.3682 1.3254 0.2045 0.088718 1.0712 0.92169; 1.1545 0.33982 -0.3216 -0.37005 -1.1924 -1.134 0.41198 1.0567 -0.0074167 0.0069997 0.34895 0.77505 0.61276 -0.0027301 0.43758 -0.41144 -0.28245 -0.42859 -0.016306 -0.35019 -0.28225 0.98211 0.90165 0.76553 0.63821 0.34177 0.5702 0.48607 0.51231 0.34059 0.33161 0.35847 0.62997 0.68473 1.3254 1.5923 0.4717 0.59714 1.1524 1.0217; 2.883 -0.1129 -0.01821 -0.90189 -1.4943 -1.2162 0.025547 0.73996 -0.018076 0.0015191 -0.056689 0.44833 0.39915 0.0245 0.22551 -0.25861 -0.17444 -0.46499 -0.16991 -0.23649 -0.45056 0.27504 0.21017 0.14593 0.20764 0.11635 0.19697 0.1373 0.19547 0.071233 0.11841 -0.038249 0.16985 0.20344 0.2045 0.4717 1.6584 1.9029 0.55002 0.60038; 0.36659 -0.14719 -0.23447 -0.17653 0.11949 -0.36536 -0.20428 0.55682 -0.003538 0.015513 -0.20322 0.13378 0.89839 -0.1806 -0.15054 -0.21638 -0.043452 0.11193 -0.063029 0.29005 -0.10073 0.17184 0.046547 0.045657 0.11358 0.030913 0.085025 0.076923 0.086025 -0.015504 0.05807 -0.18833 -0.039193 0.17106 0.088718 0.59714 1.9029 2.9279 0.54937 0.67564; 7.4551 -0.25328 0.040379 -3.2082 -3.5795 -3.2175 0.57956 2.0891 -0.064299 -0.0029599 0.14291 1.5605 1.196 0.067241 0.93611 -0.83356 -0.83739 -1.2738 -0.40069 -1.0484 -1.0446 1.3108 1.1825 0.89524 0.68378 0.22267 0.52156 0.37264 0.36886 0.24841 0.23568 0.26029 0.73411 0.78508 1.0712 1.1524 0.55002 0.54937 2.0857 1.6484; 6.1441 -0.2629 0.13635 -2.6872 -2.9388 -2.6643 0.48528 1.7434 -0.053857 0.00031372 0.081576 1.2956 1.2094 -0.0028898 0.73182 -0.72729 -0.67516 -1.0254 -0.30981 -0.88689 -0.84198 1.0177 0.90844 0.71616 0.53641 0.12151 0.42824 0.30413 0.3238 0.24494 0.23865 0.22912 0.54529 0.60357 0.92169 1.0217 0.60038 0.67564 1.6484 1.722]
    compositiondist = CompositionNormal(μ, StatGeochem.nearestposdef(Σ))
    calog = CompositionArray(rand(compositiondist, 10000))
    (c,m,e) = bin_bsr(calog.SiO2, calog, 40, 80, 4)
    @test m isa CompositionVector{NCKFMASHTOlogtrace{Float64}}
    @test m.SiO2 ≈ [46.7, 55.5, 64.0, 72.0] atol=10
    @test m.TiO2 ≈ [1.65, 1.12, 0.607, 0.125] atol= 1
    @test m.Al2O3 ≈ [14.8, 14.6, 14.4, 14.1] atol=2
    @test m.FeO ≈ [10.6, 7.37, 4.32, 1.52] atol=2
    @test m.Sm ≈ [1.82, 1.87, 1.92, 1.94] atol=2

    ca = CompositionArray{NCKFMASHTOtrace}(calog)
    (c,m,e) = bin_bsr(ca.SiO2, ca, 40, 80, 4)
    @test c == 45:10:75
    @test m isa CompositionVector{NCKFMASHTOtrace{Float64}}
    @test m.SiO2 ≈ [46.7, 55.5, 64.0, 72.0] atol=10
    @test m.TiO2 ≈ [1.65, 1.12, 0.607, 0.125] atol= 1
    @test m.Al2O3 ≈ [14.8, 14.6, 14.4, 14.1] atol=2
    @test m.FeO ≈ [10.6, 7.37, 4.32, 1.52] atol=2
    @test m.Sm ≈ [6.5, 6.3, 6.5, 7.0] atol=2
    @test e isa Array{Float64,3}

    (c,m,e) = bin_bsr(ca.SiO2, ca, 40, 80, 4; ResultType=NCKFMASHTOlogtrace{Float64})
    @test m isa CompositionVector{NCKFMASHTOlogtrace{Float64}}
    @test m.SiO2 ≈ [46.7, 55.5, 64.0, 72.0] atol=10
    @test m.TiO2 ≈ [1.65, 1.12, 0.607, 0.125] atol= 1
    @test m.Al2O3 ≈ [14.8, 14.6, 14.4, 14.1] atol=2
    @test m.FeO ≈ [10.6, 7.37, 4.32, 1.52] atol=2
    @test m.Sm ≈ [1.82, 1.87, 1.92, 1.94] atol=2

## -- bin_bsr_ratios

    x = 0:100; num = 0:100; denom=reverse(num)
    xmin = 0; xmax = 100; nbins = 5
    step = (xmax-xmin)/nbins
    (c,m,el,eu) = bin_bsr_ratios(x, num, denom, xmin, xmax, nbins, x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [0.11, 0.43, 1.0, 2.33, 8.99], rtol=0.1)
    @test isapprox(el, [0.03, 0.05, 0.09, 0.26, 2.11], rtol=0.4)
    @test isapprox(eu, [0.03, 0.05, 0.1, 0.29, 3.03], rtol=0.4)

    (c,m,el,eu) = bin_bsr_ratios(x, num, denom, xmin:step:xmax, x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [0.11, 0.43, 1.0, 2.33, 8.99], rtol=0.1)
    @test isapprox(el, [0.03, 0.05, 0.09, 0.26, 2.11], rtol=0.4)
    @test isapprox(eu, [0.03, 0.05, 0.1, 0.29, 3.03], rtol=0.4)

    # With weights
    (c,m,el,eu) = bin_bsr_ratios(x, num, denom, xmin, xmax, nbins, ones(101), x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [0.11, 0.43, 1.0, 2.33, 8.99], rtol=0.1)
    @test isapprox(el, [0.03, 0.05, 0.09, 0.26, 2.11], rtol=0.4)
    @test isapprox(eu, [0.03, 0.05, 0.1, 0.29, 3.03], rtol=0.4)

    # Medians
    (c,m,el,eu) = bin_bsr_ratio_medians(x, num, denom, xmin, xmax, nbins, x_sigma=ones(101))
    @test c == 10.0:20.0:90.0
    @test isapprox(m, [0.11, 0.43, 1.0, 2.34, 9.25], rtol=0.1)
    @test isapprox(el, [0.05, 0.08, 0.15, 0.4, 3.1], rtol=0.5)
    @test isapprox(eu, [0.05, 0.09, 0.17, 0.51, 6.42], rtol=0.5)

## --- Constant silica reference model

    N = 10000
    SiO2 = rand(N) * 40 .+ 40
    Age = rand(N) * 3800
    Y = 1 .+ rand(N) .* (SiO2 .- 40)./10 .* (4000 .- Age)./1000
    ds = (; Y=Y, Age=Age, SiO2=SiO2, Y_sigma=Y*0.05, Age_sigma=Age*0.05)

    c,m,el,eu = constproportion(bin_bsr_means, ds, "Age", "Y", 0, 4000, 8)
    @test c == 250:500:3750
    @test round.(m, sigdigits=2) ≈  [4.9, 4.4, 3.8, 3.4, 2.8, 2.3, 1.8, 1.4] rtol=0.2
    @test round.(el, sigdigits=2) ≈ [0.12, 0.1, 0.091, 0.08, 0.063, 0.043, 0.029, 0.021] rtol=0.2
    @test round.(eu, sigdigits=2) ≈ [0.12, 0.1, 0.092, 0.074, 0.062, 0.043, 0.03, 0.023] rtol=0.2

    Num = 10 .+ rand(N) .* (SiO2 .- 40)./10 .* (4000 .- Age)./1000
    Denom = 100 .- rand(N) .* (SiO2 .- 40)./10 .* Age./1000
    ds = (; ds..., Num=Num, Denom=Denom, Num_sigma=0.05Num, Denom_sigma=0.05Denom)

    c,m,el,eu = constproportion(bin_bsr_ratio_medians, ds, "Age", "Num", "Denom", 0, 4000, 8)
    @test c == 250:500:3750
    @test round.(m, sigdigits=2) ≈ [0.14, 0.13, 0.13, 0.12, 0.12, 0.12, 0.11, 0.11] rtol=0.2
    @test round.(el, sigdigits=2) ≈ [0.0019, 0.0018, 0.0016, 0.0014, 0.0011, 0.00087, 0.00073, 0.00084] rtol=0.2
    @test round.(eu, sigdigits=2) ≈ [0.002, 0.0018, 0.0017, 0.0013, 0.0011, 0.00089, 0.00076, 0.00083] rtol=0.2


## --- Monte Carlo interpolation/fitting

    (c,m) = mcfit(0:11, ones(12), 0:11, ones(12), 1, 10, 10)
    @test c == 1:10
    @test isapprox(m, [1.15, 2.02, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 8.98, 9.85], atol = 0.25)

## --- Downsampling

    @test downsample(1:100, 10) == 10:10:100
    A = reshape(1:100,10,10)
    @test downsample(A, 2) == [12 32 52 72 92; 14 34 54 74 94; 16 36 56 76 96; 18 38 58 78 98; 20 40 60 80 100]
    @test downsample(collect(A), 2) == [12 32 52 72 92; 14 34 54 74 94; 16 36 56 76 96; 18 38 58 78 98; 20 40 60 80 100]

## ---
